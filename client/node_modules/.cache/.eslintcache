[{"/Users/bernarad/WebstormProjects/todo-portfolio/client/src/index.js":"1","/Users/bernarad/WebstormProjects/todo-portfolio/client/src/App.js":"2","/Users/bernarad/WebstormProjects/todo-portfolio/client/src/components/ListHeader.js":"3","/Users/bernarad/WebstormProjects/todo-portfolio/client/src/components/ListItem.js":"4","/Users/bernarad/WebstormProjects/todo-portfolio/client/src/components/Auth.js":"5","/Users/bernarad/WebstormProjects/todo-portfolio/client/src/components/Modal.js":"6","/Users/bernarad/WebstormProjects/todo-portfolio/client/src/components/ProgressBar.js":"7","/Users/bernarad/WebstormProjects/todo-portfolio/client/src/components/TickIcon.js":"8"},{"size":257,"mtime":1682616430906,"results":"9","hashOfConfig":"10"},{"size":1885,"mtime":1683662200029,"results":"11","hashOfConfig":"10"},{"size":1006,"mtime":1683252422853,"results":"12","hashOfConfig":"10"},{"size":1404,"mtime":1683662199992,"results":"13","hashOfConfig":"10"},{"size":3545,"mtime":1683662200034,"results":"14","hashOfConfig":"10"},{"size":3088,"mtime":1683662200047,"results":"15","hashOfConfig":"10"},{"size":551,"mtime":1683503475628,"results":"16","hashOfConfig":"10"},{"size":484,"mtime":1682992577751,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"f2sf5y",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/bernarad/WebstormProjects/todo-portfolio/client/src/index.js",[],[],"/Users/bernarad/WebstormProjects/todo-portfolio/client/src/App.js",["46","47","48"],[],"import ListHeader from \"./components/ListHeader\";\nimport { useEffect, useState } from \"react\";\nimport ListItem from \"./components/ListItem\";\nimport Auth from \"./components/Auth\";\nimport { useCookies } from \"react-cookie\";\n\nfunction App() {\n    const [cookies, setCookie, removeCookie] = useCookies( null )\n    const authToken = cookies.AuthToken   // const authToken = false;\n    const userEmail = cookies.Email;      // hard coded before cookies const userEmail = 'bernie@test.com';\n\n    const [tasks, setTasks] = useState( null );\n\n    const getData = async () => {\n        try {\n            const response = await fetch( `/todos/${ userEmail }` )\n            const json = await response.json();\n            setTasks( json )\n        } catch ( err ) {\n            console.log( err )\n        }\n    }\n\n// If we are not logged in, nothing loads,\n// If logged in - once data is received we want to call our getData function with useEffect\n    useEffect( () => {\n            if (authToken) {\n                getData()\n            }\n        }\n        , [] );\n\n    //Sort by date\n    const sortedTasks = tasks?.sort( (a, b) => new Date( a.date ) - new Date( b.date ) )\n\n\n    return (\n        <div className=\"app\">\n            { !authToken && <Auth/> }\n            { authToken &&\n                <>\n                    <ListHeader\n                        listName={ '📝 Task keeper' }\n                        getData={ getData }\n                    />\n                    <p className=\"user-email\">Welcome back {userEmail} </p>\n                    { sortedTasks?.map( (task) =>\n                        <ListItem key={ task.id }\n                                  task={ task }\n                                  getData={ getData }\n                        /> ) }\n                </>\n            }\n            <p className=\"copyright\">©BM LLC</p>\n        </div>\n    );\n}\n\nexport default App;\n","/Users/bernarad/WebstormProjects/todo-portfolio/client/src/components/ListHeader.js",["49","50"],[],"import React, { useState } from 'react';\nimport Modal from \"./Modal\";\nimport { useCookies } from \"react-cookie\";\n\n\nfunction ListHeader({ listName, getData }) {\n\n    const [cookies, setCookie, removeCookie] = useCookies(null)\n\n    const signOut = () => {\n        removeCookie('Email')\n        removeCookie('AuthToken')\n\n        window.location.reload();\n    }\n\n    const [showModal, setShowModal] = useState( false );\n\n    return (\n        <div className=\"list-header\">\n            <h1>{ listName }</h1>\n            <div className=\"button-container\">\n                <button className=\"create\" onClick={ () => setShowModal( true ) }>ADD NEW</button>\n                <button className=\"signout\" onClick={ signOut }>SIGN OUT</button>\n\n                { showModal &&\n                    <Modal mode={ 'create' }\n                           setShowModal={ setShowModal }\n                           getData={ getData }\n                    /> }\n            </div>\n        </div>\n    )\n}\n\nexport default ListHeader;","/Users/bernarad/WebstormProjects/todo-portfolio/client/src/components/ListItem.js",[],[],"/Users/bernarad/WebstormProjects/todo-portfolio/client/src/components/Auth.js",["51","52"],[],"import { useState } from 'react';\nimport { useCookies } from 'react-cookie';\n\nfunction Auth() {\n    const [cookies, setCookie, removeCookie] = useCookies( null );\n    const [isLogin, setIsLogin] = useState( true );\n    const [email, setEmail] = useState( null );\n    const [password, setPassword] = useState( null );\n    const [confirmPassword, setConfirmPassword] = useState( null )\n    const [error, setError] = useState( null );\n\n    // console.log( email, password, confirmPassword );\n    // console.log( 'cookies', cookies );\n\n\n    const viewLogin = (status) => {\n        setIsLogin( status )\n        setError( null )\n    }\n\n\n    const handleSubmit = async (e, endpoint) => {\n        e.preventDefault()\n        if (!isLogin && password !== confirmPassword) {\n            setError( \"Make sure passwords match!\" )\n            return\n        }\n        //Sending data to the server, either login or signup - conditionally\n        const response = await fetch( `/${ endpoint }`, {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify( { email, password } )\n        } )\n\n        //wait for the data we receive back from server and assign it to const data\n        const data = await response.json()\n\n        if (data.detail) {\n            setError( data.detail )\n            // console.log(data)\n        } else {\n            // if logged in successfully, set the Cookies and refresh the page:\n            setCookie('Email', data.email)\n            setCookie('AuthToken', data.token)\n\n            //refresh the page with all the content that user's todos\n            window.location.reload()\n        }\n    }\n\n    return (\n        <div className=\"auth-container\">\n            <div className=\"auth-container-box\">\n                <form>\n                    <h2>{ isLogin ? \"Please log in \" : \"Please sign up\" }</h2>\n\n                    <input\n                        type=\"email\"\n                        placeholder=\"Email\"\n                        onChange={ (e) => setEmail( e.target.value ) }\n                    />\n                    <input\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        onChange={ (e) => setPassword( e.target.value ) }\n                    />\n\n                    {/*Only see if you are signing up*/ }\n                    { !isLogin && <input\n                        type=\"password\"\n                        placeholder=\"Confirm password\"\n                        onChange={ (e) => setConfirmPassword( e.target.value ) }\n                    /> }\n\n                    <input\n                        type=\"submit\"\n                        className=\"create\"\n                        onClick={ (e) =>\n                            handleSubmit( e, isLogin ? 'login' : 'signup' ) }/>\n\n                    { error && <p>{ error }</p> }\n                </form>\n\n                <div className=\"auth-options\">\n                    <button\n                        onClick={ () => viewLogin( false ) }\n                        style={ { backgroundColor: !isLogin ? 'rgb(255, 255, 255' : 'rgb(188, 188, 188)' } }\n                    >Sign Up\n                    </button>\n\n                    <button\n                        onClick={ () => viewLogin( true ) }\n                        style={ { backgroundColor: isLogin ? 'rgb(255, 255, 255' : 'rgb(188, 188, 188)' } }\n                    >Login\n                    </button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Auth;","/Users/bernarad/WebstormProjects/todo-portfolio/client/src/components/Modal.js",["53","54"],[],"import React, { useState } from 'react';\nimport { useCookies } from \"react-cookie\";\n\n\nfunction Modal({ mode, task, getData, setShowModal }) {\n    const [cookies, setCookie, removeCookie] = useCookies(null);\n\n    const editMode = mode === 'edit' ? true : false\n\n    const [data, setData] = useState( {\n        user_email: editMode ? task.user_email : cookies.Email,\n        title: editMode ? task.title : null,\n        progress: editMode ? task.progress : 10,\n        date: editMode ? task.date : new Date()\n    } );\n\n    const postData = async (e) => {\n        e.preventDefault()\n        try {\n            const response = await fetch( `/todos`, {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify( data )\n            } )\n            if (response.status === 200) {\n                setShowModal( false );\n                getData();\n            }\n        } catch ( error ) {\n            console.log( error )\n        }\n    };\n\n    const editData = async (e) => {\n        e.preventDefault()\n        try {\n            const response = await fetch( `/todos/${ task.id }`, {\n                method: \"PUT\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify( data )\n            } )\n            if (response.status === 200) {\n                setShowModal( false );\n                getData()\n            }\n        } catch ( err ) {\n            console.error( err )\n        }\n    }\n\n\n    const handleChange = (e) => {\n        const {name, value} = e.target\n        setData( data => ( {\n            ...data,\n            [name]: value\n        } ) )\n    }\n\n\n    return (\n        <div className=\"overlay\">\n            <div className=\"modal\">\n                <div className=\"form-title-container\">\n                    <h3>Lets { mode } your task</h3>\n                    <button onClick={ () => setShowModal( false ) }>Cancel</button>\n                </div>\n\n                <form>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Your task goes here\"\n                        required\n                        maxLength={ 30 }\n                        name=\"title\"\n                        value={ data.title }\n                        onChange={ handleChange }\n                    />\n                    <br/>\n\n                    <label htmlFor=\"range\">Drag to select your current progress</label>\n                    <input\n                        type=\"range\"\n                        name=\"progress\"\n                        id=\"range\"\n                        required\n                        min=\"0\" max=\"100\"\n                        value={ data.progress }\n                        onChange={ handleChange }\n                    />\n                    <input\n                        type=\"submit\"\n                        className={ mode }\n                        onClick={ editMode ? editData : postData }\n                    />\n\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default Modal;","/Users/bernarad/WebstormProjects/todo-portfolio/client/src/components/ProgressBar.js",[],[],"/Users/bernarad/WebstormProjects/todo-portfolio/client/src/components/TickIcon.js",[],[],{"ruleId":"55","severity":1,"message":"56","line":8,"column":21,"nodeType":"57","messageId":"58","endLine":8,"endColumn":30},{"ruleId":"55","severity":1,"message":"59","line":8,"column":32,"nodeType":"57","messageId":"58","endLine":8,"endColumn":44},{"ruleId":"60","severity":1,"message":"61","line":31,"column":11,"nodeType":"62","endLine":31,"endColumn":13,"suggestions":"63"},{"ruleId":"55","severity":1,"message":"64","line":8,"column":12,"nodeType":"57","messageId":"58","endLine":8,"endColumn":19},{"ruleId":"55","severity":1,"message":"56","line":8,"column":21,"nodeType":"57","messageId":"58","endLine":8,"endColumn":30},{"ruleId":"55","severity":1,"message":"64","line":5,"column":12,"nodeType":"57","messageId":"58","endLine":5,"endColumn":19},{"ruleId":"55","severity":1,"message":"59","line":5,"column":32,"nodeType":"57","messageId":"58","endLine":5,"endColumn":44},{"ruleId":"55","severity":1,"message":"56","line":6,"column":21,"nodeType":"57","messageId":"58","endLine":6,"endColumn":30},{"ruleId":"55","severity":1,"message":"59","line":6,"column":32,"nodeType":"57","messageId":"58","endLine":6,"endColumn":44},"no-unused-vars","'setCookie' is assigned a value but never used.","Identifier","unusedVar","'removeCookie' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'authToken' and 'getData'. Either include them or remove the dependency array.","ArrayExpression",["65"],"'cookies' is assigned a value but never used.",{"desc":"66","fix":"67"},"Update the dependencies array to be: [authToken, getData]",{"range":"68","text":"69"},[1048,1050],"[authToken, getData]"]